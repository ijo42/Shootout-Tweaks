buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'

group = 'ru.ijo42'
version = '1.0-SNAPSHOT'
archivesBaseName = 'shootout'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

minecraft {
    mappings channel: 'stable', version: '39-1.12'
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                shootouttweaks {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                shootouttweaks {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'
}

processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
    inputs.property "version", project.version
    inputs.property "mcversion", "1.12.2"

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        expand "version": project.version,
                "mcversion": "1.12.2"
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "shootouttweaks",
                "Specification-Vendor"    : "ijo42",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "ijo42",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Git-Commit-Hash": getGitHash()
        ])
    }
    from 'LICENSE'
}

jar.finalizedBy('reobfJar')

static def getGitHash() {
    try {
        def process = 'git rev-parse --short HEAD'.execute()
        process.waitFor()
        return (process.exitValue() ? 'unknown' : process.text.trim())
    }catch(IOException ignored){
        return 'unknown'
    }
}